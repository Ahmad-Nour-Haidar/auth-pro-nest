import * as fs from 'fs';
import * as path from 'path';

// Define paths
const inputFilePath = path.join(__dirname, 'i18n', 'en', 'translations.json');
const outputFilePath = path.join(__dirname, 'i18n', 'translation-keys.ts');

/**
 * Function to generate a TypeScript class for translation keys.
 * @param inputPath Path to the JSON translation file.
 * @param outputPath Path to save the generated TypeScript file.
 * @param className Name of the generated class.
 */
export function generateTranslationKeys(
  inputPath: string,
  outputPath: string,
  className: string = 'TranslationKeys',
) {
  try {
    // Get the file name without extension for the prefix
    const fileName = path.basename(inputPath, path.extname(inputPath));

    // Read and parse the JSON file
    const rawData = fs.readFileSync(inputPath, 'utf-8');
    const translations = JSON.parse(rawData);

    // Generate the TypeScript class content
    const classContent = [
      `/**`,
      ` * Auto-generated class for translation keys.`,
      ` * Generated from: ${inputPath}`,
      ` * Do not edit this file directly. Regenerate it if needed.`,
      ` */`,
      `export class ${className} {`,
    ];

    const addKeys = (obj: Record<string, any>, prefix = '') => {
      for (const key in obj) {
        if (typeof obj[key] === 'object') {
          addKeys(obj[key], `${prefix}${key}.`);
        } else {
          const propertyName = `${prefix}${key}`.replace(/\./g, '_');
          const propertyValue = `${fileName}.${prefix}${key}`;
          classContent.push(`  static ${propertyName} = '${propertyValue}';`);
        }
      }
    };

    addKeys(translations);

    classContent.push('}');

    // Write the content to the output file
    fs.writeFileSync(outputPath, classContent.join('\n'), 'utf-8');
    console.log(`Translation keys file generated at: ${outputPath}`);
  } catch (error) {
    console.error('Error generating translation keys file:', error);
  }
}

// Call the function
generateTranslationKeys(inputFilePath, outputFilePath);
